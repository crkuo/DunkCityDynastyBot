name: PyInstaller Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: windows-latest  # Windows Âπ≥Âè∞ÊâìÂåÖ .exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: üîç Parse tag info
      id: tag
      shell: bash
      run: |
        CURRENT_TAG="${GITHUB_REF#refs/tags/}"
        echo "Current tag: $CURRENT_TAG"

        if [[ "$CURRENT_TAG" == *_rc* ]]; then
          echo "Detected RC version, skipping cleanup"
          echo "skip_cleanup=true" >> "$GITHUB_OUTPUT"
          echo "base_tag=SKIP" >> "$GITHUB_OUTPUT"
        else
          echo "Detected formal version, will clean rc releases"
          echo "skip_cleanup=false" >> "$GITHUB_OUTPUT"
          echo "base_tag=$CURRENT_TAG" >> "$GITHUB_OUTPUT"
        fi

    - name: üßπ Delete _rc releases and tags
      if: steps.tag.outputs.skip_cleanup == 'false'
      shell: bash
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        BASE_TAG: ${{ steps.tag.outputs.base_tag }}
      run: |
        echo "üîç Looking for releases & tags starting with ${BASE_TAG}_rc"
    
        # === List and delete matching releases ===
        release_tags=$(gh release list --limit 100 --json tagName | jq -r '.[].tagName' | grep "^${BASE_TAG}_rc")
    
        if [[ -z "$release_tags" ]]; then
          echo "‚úÖ No matching releases to delete."
        else
          echo "üóíÔ∏è Matched releases to delete:"
          echo "$release_tags"
        fi
    
        for tag in $release_tags; do
          echo "üî• Deleting release: $tag"
          gh release delete "$tag" --yes || echo "‚ö†Ô∏è Failed to delete release $tag"
        done
    
        # === Delete matching Git tags ===
        git fetch --tags
        git_tags=$(git ls-remote --tags origin | awk '{print $2}' | grep "^refs/tags/${BASE_TAG}_rc")
    
        if [[ -z "$git_tags" ]]; then
          echo "‚úÖ No matching git tags to delete."
        else
          echo "üóíÔ∏è Matched git tags to delete:"
          echo "$git_tags"
        fi
    
        for ref in $git_tags; do
          tag="${ref#refs/tags/}"
          echo "üî• Deleting git tag: $tag"
          git push origin ":refs/tags/$tag" || echo "‚ö†Ô∏è Failed to delete tag $tag"
        done
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11.3'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        if (Test-Path "requirements.txt") {
            pip install -r requirements.txt
        }

    - name: Build with PyInstaller using main.spec
      run: |
        pyinstaller main.spec
      shell: cmd

    - name: Prepare release package folder
      run: |
        mkdir packaged
        copy dist\main.exe packaged\main.exe
        xcopy assets packaged\assets /E /I
        copy config.json packaged\
        copy LICENSE packaged\
        powershell Compress-Archive -Path packaged\* -DestinationPath DunkCityDynastyBot_win.zip


    - name: Upload Release Asset
      uses: softprops/action-gh-release@v2
      with:
        files: DunkCityDynastyBot_win.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
